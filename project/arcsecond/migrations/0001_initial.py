# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import multiselectfield.db.fields
from django.conf import settings
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Age',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('unit', models.CharField(default=b'Gyr', max_length=3, choices=[(b'Gyr', b'Gyr'), (b'Myr', b'Myr'), (b'yr', b'yr')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Albedo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=500)),
                ('catalogue_url', models.URLField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Angle',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('unit', models.CharField(default=b'sec', max_length=3, choices=[(b'mas', b'mas'), (b'sec', b"'"), (b'min', b'"'), (b'deg', '\xba')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AstronomersTelegram',
            fields=[
                ('identifier', models.CharField(max_length=10, serialize=False, primary_key=True)),
                ('title', models.CharField(max_length=1000, null=True, blank=True)),
                ('credential_certification', models.CharField(max_length=500, null=True, blank=True)),
                ('subjects', models.CharField(max_length=200, null=True, blank=True)),
                ('content', models.CharField(max_length=20000, null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='AstronomicalCoordinates',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('system', models.CharField(default=b'ICRS', max_length=20, choices=[(b'ICRS', b'ICRS'), (b'FK5', b'FK5'), (b'FK4', b'FK4'), (b'FK4NoETerms', b'FK4NoETerms'), (b'Galactic', b'Galactic'), (b'AltAz', b'AltAz')])),
                ('right_ascension', models.FloatField(null=True, blank=True)),
                ('right_ascension_units', models.CharField(default=b'degrees', max_length=100)),
                ('declination', models.FloatField(null=True, blank=True)),
                ('declination_units', models.CharField(default=b'degrees', max_length=100)),
                ('epoch', models.FloatField(default=2000)),
                ('equinox', models.FloatField(default=2000)),
            ],
        ),
        migrations.CreateModel(
            name='AstronomicalObject',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('spectral_type', models.CharField(max_length=1000, null=True, blank=True)),
                ('age', models.OneToOneField(null=True, blank=True, to='arcsecond.Age')),
                ('coordinates', models.OneToOneField(null=True, blank=True, to='arcsecond.AstronomicalCoordinates')),
            ],
        ),
        migrations.CreateModel(
            name='AstronomicalOrganisation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100, null=True, blank=True)),
                ('acronym', models.CharField(max_length=100, null=True, blank=True)),
                ('website', models.URLField(null=True, blank=True)),
                ('wikipedia_article', models.URLField(null=True, blank=True)),
                ('organisation_type', models.CharField(default=b'Unknown', max_length=100, choices=[(b'Unknown', b'Unknown'), (b'Public', b'Public'), (b'Private', b'Private'), (b'Mixed', b'Mixed')])),
            ],
        ),
        migrations.CreateModel(
            name='CIRSCoordinates',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ra', models.CharField(max_length=20, null=True, blank=True)),
                ('ra_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('dec', models.CharField(max_length=20, null=True, blank=True)),
                ('dec_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('distance', models.CharField(max_length=20, null=True, blank=True)),
                ('distance_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('documentation', models.CharField(max_length=1000, null=True, blank=True)),
                ('documentation_URL', models.URLField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('first_magnitude_name', models.CharField(max_length=2)),
                ('second_magnitude_name', models.CharField(max_length=2)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Coordinates',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('longitude', models.FloatField(default=-9999999999999)),
                ('latitude', models.FloatField(default=-9999999999999)),
                ('height', models.FloatField(default=-9999999999999)),
            ],
            options={
                'ordering': ['longitude', 'latitude'],
            },
        ),
        migrations.CreateModel(
            name='CoordinatesConversion',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('input_first_value', models.CharField(max_length=20, null=True, blank=True)),
                ('input_second_value', models.CharField(max_length=20, null=True, blank=True)),
                ('input_frame', models.CharField(max_length=20, null=True, blank=True)),
                ('CIRS', models.OneToOneField(null=True, blank=True, to='arcsecond.CIRSCoordinates')),
            ],
        ),
        migrations.CreateModel(
            name='Distance',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('unit', models.CharField(default=b'pc', max_length=3, choices=[(b'km', b'km'), (b'UA', b'UA'), (b'ly', b'ly'), (b'pc', b'pc'), (b'kpc', b'kpc'), (b'Mpc', b'Mpc')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dome',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=1000, null=True, blank=True)),
                ('shape', models.CharField(max_length=1000, null=True, blank=True)),
                ('image', models.ImageField(null=True, upload_to=b'', blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Eccentricity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EllipseAxis',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('unit', models.CharField(default=b'astronomical unit', max_length=18, choices=[(b'astronomical unit', b'astronomical unit'), (b'sun radius', b'sun radius')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Error',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('code', models.PositiveSmallIntegerField()),
                ('message', models.CharField(max_length=1000, null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='ESOProgrammeSummary',
            fields=[
                ('programme_id', models.CharField(max_length=20, serialize=False, primary_key=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{2,3}\\.[A-Fa-f]{1}-[0-9]{4}\\([A-Za-z]{1}\\)', message=b'Invalid ESO Programme ID', code=b'nomatch')])),
                ('period', models.CharField(max_length=100, null=True, blank=True)),
                ('observing_mode', models.CharField(default=b'(Undefined)', max_length=100, choices=[(b'(Undefined)', b'(Undefined)'), (b'Visitor', b'Visitor'), (b'Service', b'Service')])),
                ('programme_type', models.CharField(default=b'(Undefined)', max_length=100, choices=[(b'(Undefined)', b'(Undefined)'), (b'Normal Programme', b'Normal Programme'), (b'Guaranteed Time Observations', b'Guaranteed Time Observations'), (b"Director's Discretionary Time", b"Director's Discretionary Time"), (b'Target of Opportunity', b'Target of Opportunity'), (b'Large Programme', b'Large Programme'), (b'Short Programme', b'Short Programme'), (b'Calibration Programme', b'Calibration Programme'), (b'Monitoring Programme', b'Monitoring Programme')])),
                ('allocated_time', models.CharField(max_length=100, null=True, blank=True)),
                ('telescope_name', models.CharField(max_length=100, null=True, blank=True)),
                ('instrument_name', models.CharField(max_length=100, null=True, blank=True)),
                ('investigators_list', models.CharField(max_length=500, null=True, blank=True)),
                ('programme_title', models.CharField(max_length=500, null=True, blank=True)),
                ('remarks', models.CharField(max_length=500, null=True, blank=True)),
                ('abstract_url', models.URLField(max_length=500, null=True, blank=True)),
                ('abstract', models.CharField(max_length=5000, null=True, blank=True)),
                ('observer_name', models.CharField(max_length=500, null=True, blank=True)),
                ('raw_files_url', models.URLField(max_length=500, null=True, blank=True)),
                ('publications_url', models.URLField(max_length=500, null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Exoplanet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('discovery_date', models.DateTimeField(null=True, blank=True)),
                ('last_update', models.DateTimeField(null=True, blank=True)),
                ('molecules_detected', models.CharField(max_length=100, null=True, blank=True)),
                ('publication_status', models.CharField(max_length=200, null=True, blank=True)),
                ('detection_method', models.CharField(default=b'unk', max_length=3, blank=True, choices=[(b'unk', b'Unknown'), (b'rvs', b'Radial Velocity'), (b'mls', b'Microlensing'), (b'tra', b'Primary Transit'), (b'tim', b'Timing'), (b'ast', b'Astrometry'), (b'img', b'Imaging')])),
                ('mass_detection_method', models.CharField(default=b'unk', max_length=3, blank=True, choices=[(b'unk', b'Unknown'), (b'rvs', b'Radial Velocity'), (b'mls', b'Microlensing'), (b'tra', b'Primary Transit'), (b'tim', b'Timing'), (b'ast', b'Astrometry'), (b'img', b'Imaging')])),
                ('radius_detection_method', models.CharField(default=b'unk', max_length=3, blank=True, choices=[(b'unk', b'Unknown'), (b'rvs', b'Radial Velocity'), (b'mls', b'Microlensing'), (b'tra', b'Primary Transit'), (b'tim', b'Timing'), (b'ast', b'Astrometry'), (b'img', b'Imaging')])),
                ('angular_distance', models.OneToOneField(related_name='angular_distance', null=True, blank=True, to='arcsecond.Angle')),
                ('anomaly_angle', models.OneToOneField(related_name='anomaly_angle', null=True, blank=True, to='arcsecond.Angle')),
            ],
        ),
        migrations.CreateModel(
            name='FindingChart',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('input', models.CharField(max_length=100, null=True, blank=True)),
                ('survey_name', models.CharField(default=b'unk', max_length=20, choices=[(b'unk', b'(Undefined)'), (b'sdss', b'SDSS'), (b'dss', b'DSS'), (b'2mass', b'2MASS')])),
                ('width', models.FloatField(null=True, blank=True)),
                ('height', models.FloatField(null=True, blank=True)),
                ('size_unit', models.CharField(default=b'unk', max_length=20, choices=[(b'unk', b'(Undefined)'), (b'arcsec', b'arcseconds'), (b'arcmin', b'arcminutes'), (b'deg', b'degrees')])),
                ('orientation', models.CharField(default=b'unk', max_length=20, choices=[(b'unk', b'(Undefined)'), (b'NuEl', b'N up E left'), (b'NuEr', b'N up E right'), (b'NdEl', b'N down E left'), (b'NdEr', b'N down E right')])),
                ('band_name', models.CharField(max_length=20, null=True, blank=True)),
                ('observing_date', models.DateField(null=True, blank=True)),
                ('fits_url', models.URLField(max_length=500)),
                ('image_url', models.URLField(max_length=500)),
                ('astronomical_object', models.ForeignKey(related_name='finding_charts', blank=True, to='arcsecond.AstronomicalObject', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FK4Coordinates',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ra', models.CharField(max_length=20, null=True, blank=True)),
                ('ra_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('dec', models.CharField(max_length=20, null=True, blank=True)),
                ('dec_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('distance', models.CharField(max_length=20, null=True, blank=True)),
                ('distance_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('equinox', models.CharField(max_length=20, null=True, blank=True)),
                ('documentation', models.CharField(max_length=1000, null=True, blank=True)),
                ('documentation_URL', models.URLField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='FK4NoETermsCoordinates',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ra', models.CharField(max_length=20, null=True, blank=True)),
                ('ra_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('dec', models.CharField(max_length=20, null=True, blank=True)),
                ('dec_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('distance', models.CharField(max_length=20, null=True, blank=True)),
                ('distance_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('equinox', models.CharField(max_length=20, null=True, blank=True)),
                ('documentation', models.CharField(max_length=1000, null=True, blank=True)),
                ('documentation_URL', models.URLField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='FK5Coordinates',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ra', models.CharField(max_length=20, null=True, blank=True)),
                ('ra_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('dec', models.CharField(max_length=20, null=True, blank=True)),
                ('dec_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('distance', models.CharField(max_length=20, null=True, blank=True)),
                ('distance_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('equinox', models.CharField(max_length=20, null=True, blank=True)),
                ('documentation', models.CharField(max_length=1000, null=True, blank=True)),
                ('documentation_URL', models.URLField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Flux',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('name', models.CharField(max_length=500)),
                ('astronomical_object', models.ForeignKey(related_name='fluxes', blank=True, to='arcsecond.AstronomicalObject', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GalacticCoordinates',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('l', models.CharField(max_length=20, null=True, blank=True)),
                ('l_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('b', models.CharField(max_length=20, null=True, blank=True)),
                ('b_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('distance', models.CharField(max_length=20, null=True, blank=True)),
                ('distance_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('documentation', models.CharField(max_length=1000, null=True, blank=True)),
                ('documentation_URL', models.URLField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='GCRSCoordinates',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ra', models.CharField(max_length=20, null=True, blank=True)),
                ('ra_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('dec', models.CharField(max_length=20, null=True, blank=True)),
                ('dec_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('distance', models.CharField(max_length=20, null=True, blank=True)),
                ('distance_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('documentation', models.CharField(max_length=1000, null=True, blank=True)),
                ('documentation_URL', models.URLField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Gravity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('unit', models.CharField(default=b'log(g/gH)', max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HSTProgrammeSummary',
            fields=[
                ('programme_id', models.CharField(max_length=20, serialize=False, primary_key=True)),
                ('cycle', models.CharField(max_length=100, null=True, blank=True)),
                ('allocation', models.CharField(max_length=100, null=True, blank=True)),
                ('title', models.CharField(max_length=500)),
                ('principal_investigator', models.CharField(max_length=100)),
                ('pi_institution', models.CharField(max_length=200)),
                ('programme_type', models.CharField(default=b'(Undefined)', max_length=100, choices=[(b'(Undefined)', b'(Undefined)'), (b'Archival Research', b'Archival Research'), (b'Calibration program', b'Calibration program'), (b'Engineering program', b'Engineering program'), (b'General Observer program', b'General Observer program'), (b"Director's Discretionary program", b"Director's Discretionary program"), (b'Pure parallel program', b'Pure parallel program'), (b'Guaranteed Time Observer program', b'Guaranteed Time Observer program'), (b'Observing program conducted at the direction of NASA', b'Observing program conducted at the direction of NASA'), (b'Snapshot program', b'Snapshot program')])),
                ('programme_type_auxiliary', models.CharField(max_length=100)),
                ('programme_status', models.CharField(default=b'(Undefined)', max_length=100, choices=[(b'(Undefined)', b'(Undefined)'), (b'Pending Phase II Submission', b'Pending Phase II Submission'), (b'Implementation', b'Implementation'), (b'Scheduling', b'Scheduling'), (b'Program has been Completed', b'Program has been Completed')])),
                ('abstract', models.CharField(max_length=5000, null=True, blank=True)),
                ('related_programmes', models.ForeignKey(blank=True, to='arcsecond.HSTProgrammeSummary', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ICRSCoordinates',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ra', models.CharField(max_length=20, null=True, blank=True)),
                ('ra_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('dec', models.CharField(max_length=20, null=True, blank=True)),
                ('dec_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('distance', models.CharField(max_length=20, null=True, blank=True)),
                ('distance_unit', models.CharField(max_length=20, null=True, blank=True)),
                ('documentation', models.CharField(max_length=1000, null=True, blank=True)),
                ('documentation_URL', models.URLField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='JulianDay',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=1000, null=True, blank=True)),
                ('url', models.URLField(max_length=2000, null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Mass',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('unit', models.CharField(default=b'sun', max_length=3, choices=[(b'sun', b'Msun'), (b'jup', b'Mjup'), (b'nep', b'Mnep'), (b'ear', b'Mearth')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Metallicity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('unit', models.CharField(default=b'Z', max_length=1, choices=[(b'Z', b'Z'), (b'F', b'Fe/H')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Mirror',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('mirror_index', models.IntegerField(default=0, null=True, blank=True)),
                ('creation_date', models.DateField(null=True, blank=True)),
                ('diameter', models.FloatField(null=True, blank=True)),
                ('thickness', models.FloatField(null=True, blank=True)),
                ('shape', models.CharField(max_length=100, null=True, blank=True)),
                ('curvature', models.CharField(max_length=100, null=True, blank=True)),
                ('coating', models.CharField(max_length=100, null=True, blank=True)),
                ('central_obscuration', models.FloatField(null=True, blank=True)),
                ('material', models.CharField(max_length=100, null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='ObjectType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.CharField(max_length=500)),
                ('astronomical_object', models.ForeignKey(related_name='object_types', blank=True, to='arcsecond.AstronomicalObject', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ObservingSite',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100, unique=True, null=True, blank=True)),
                ('long_name', models.CharField(max_length=100, null=True, blank=True)),
                ('IAUCode', models.CharField(max_length=200, unique=True, null=True, blank=True)),
                ('continent', models.CharField(default=b'(Undefined)', max_length=100, choices=[(b'(Undefined)', b'(Undefined)'), (b'Asia', b'Asia'), (b'Africa', b'Africa'), (b'Antarctica', b'Antarctica'), (b'Europe', b'Europe'), (b'North America', b'North America'), (b'Oceania', b'Oceania'), (b'South America', b'South America')])),
                ('address_line_1', models.CharField(max_length=200, null=True, blank=True)),
                ('address_line_2', models.CharField(max_length=200, null=True, blank=True)),
                ('zip_code', models.IntegerField(null=True, blank=True)),
                ('country', models.CharField(max_length=200, null=True)),
                ('time_zone', models.CharField(max_length=200, null=True, blank=True)),
                ('time_zone_name', models.CharField(max_length=200, null=True, blank=True)),
                ('homepage', models.URLField(null=True, blank=True)),
                ('wikipedia_article', models.URLField(null=True, blank=True)),
                ('coordinates', models.OneToOneField(related_name='site', to='arcsecond.Coordinates')),
            ],
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('unit', models.CharField(default=b'd', max_length=1, choices=[(b's', b'seconds'), (b'm', b'minutes'), (b'd', b'days'), (b'h', b'hours'), (b'w', b'weeks'), (b'y', b'years')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('first_name', models.CharField(default=b'', max_length=1000)),
                ('middle_name', models.CharField(default=b'', max_length=1000)),
                ('last_name', models.CharField(default=b'', max_length=1000)),
                ('profile_URL', models.URLField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(default=b'', max_length=1000, null=True, blank=True)),
                ('year', models.IntegerField(default=0, null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('eprint_id', models.CharField(max_length=50, null=True, blank=True)),
                ('publication_type', models.CharField(default=b'unk', max_length=3, choices=[(b'unk', b'unknown'), (b'art', b'article'), (b'proc', b'proceedings')])),
                ('publication_date', models.DateField(null=True, blank=True)),
                ('journal_name', models.CharField(max_length=100, null=True, blank=True)),
                ('abstract_copyright', models.CharField(max_length=200, null=True, blank=True)),
                ('volume_number', models.IntegerField(null=True, blank=True)),
                ('issue_number', models.IntegerField(null=True, blank=True)),
                ('first_page_number', models.IntegerField(null=True, blank=True)),
                ('number_of_pages', models.IntegerField(null=True, blank=True)),
                ('abstract', models.CharField(max_length=5000, null=True, blank=True)),
                ('subjects', models.CharField(max_length=200, null=True, blank=True)),
                ('keywords', models.CharField(max_length=300, null=True, blank=True)),
                ('origin', models.URLField(null=True, blank=True)),
                ('is_refereed', models.BooleanField(default=True)),
                ('bibtex_entry', models.CharField(max_length=5000, null=True, blank=True)),
                ('authors', models.ManyToManyField(related_name='publications', to='arcsecond.Person')),
                ('citations', models.ManyToManyField(related_name='citations_rel_+', to='arcsecond.Publication')),
                ('doi', models.OneToOneField(related_name='doi', null=True, blank=True, to='arcsecond.Link')),
                ('references', models.ManyToManyField(related_name='references_rel_+', to='arcsecond.Publication')),
                ('related_objects', models.ManyToManyField(related_name='related_objects', to='arcsecond.AstronomicalObject')),
            ],
        ),
        migrations.CreateModel(
            name='Radius',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('unit', models.CharField(default=b'sun', max_length=3, choices=[(b'sun', b'Rsun'), (b'jup', b'Rjup'), (b'nep', b'Rnep'), (b'ear', b'Rearth')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Telescope',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=1000, unique=True, null=True, blank=True)),
                ('acronym', models.CharField(max_length=100, null=True, blank=True)),
                ('wavelength_domains', multiselectfield.db.fields.MultiSelectField(max_length=51, choices=[(b'hga', b'Hard gamma-rays'), (b'wga', b'Weak gamma-rays'), (b'hxr', b'Hard x-rays'), (b'wxr', b'Weak x-rays'), (b'fuv', b'Far ultraviolet'), (b'nuv', b'Near ultraviolet'), (b'opt', b'Optical'), (b'nir', b'Near infrared'), (b'mir', b'Mid-infrared'), (b'fir', b'Far infrared'), (b'smm', b'Sub-milimetric'), (b'mmc', b'Milimetric'), (b'rad', b'Radio')])),
                ('mounting', models.CharField(default=b'unk', max_length=3, blank=True, choices=[(b'unk', b'Unknown'), (b'equ', b'EquatorialCassegrain'), (b'cas', b'Alt-Az'), (b'aaz', b'Off-Axis')])),
                ('optical_design', models.CharField(default=b'unk', max_length=3, blank=True, choices=[(b'unk', 'Unknown'), (b'rc', 'Ritchey-Chr\xe9tien'), (b'sc', 'Schmidt')])),
                ('has_active_optics', models.NullBooleanField()),
                ('has_adaptative_optics', models.NullBooleanField()),
                ('has_laser_guide_star', models.NullBooleanField()),
                ('coordinates', models.ManyToManyField(related_name='observing_tool', to='arcsecond.Coordinates')),
                ('dome', models.OneToOneField(related_name='telescope', null=True, blank=True, to='arcsecond.Dome')),
                ('observing_site', models.ForeignKey(related_name='telescopes', blank=True, to='arcsecond.ObservingSite', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Temperature',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('unit', models.CharField(default=b'K', max_length=1, choices=[(b'K', b'Kelvin'), (b'C', b'Celsius')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimesConversion',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('input_format', models.CharField(max_length=100, null=True, blank=True)),
                ('input_value', models.CharField(max_length=100, null=True, blank=True)),
                ('documentation_URL', models.URLField(null=True, blank=True)),
                ('byear', models.FloatField(max_length=100, null=True, blank=True)),
                ('byear_str', models.CharField(max_length=100, null=True, blank=True)),
                ('cxcsec', models.FloatField(max_length=100, null=True, blank=True)),
                ('datetime', models.CharField(max_length=100, null=True, blank=True)),
                ('decimalyear', models.FloatField(max_length=100, null=True, blank=True)),
                ('gps', models.FloatField(max_length=100, null=True, blank=True)),
                ('iso', models.CharField(max_length=100, null=True, blank=True)),
                ('isot', models.CharField(max_length=100, null=True, blank=True)),
                ('jd', models.FloatField(max_length=100, null=True, blank=True)),
                ('jyear', models.FloatField(max_length=100, null=True, blank=True)),
                ('jyear_str', models.CharField(max_length=100, null=True, blank=True)),
                ('mjd', models.FloatField(max_length=100, null=True, blank=True)),
                ('plot_date', models.FloatField(max_length=100, null=True, blank=True)),
                ('unix', models.FloatField(max_length=100, null=True, blank=True)),
                ('yday', models.CharField(max_length=100, null=True, blank=True)),
                ('error', models.OneToOneField(related_name='times_conversion_error', null=True, blank=True, to='arcsecond.Error')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user', models.OneToOneField(related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Velocity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('error', models.FloatField(null=True, blank=True)),
                ('error_max', models.FloatField(null=True, blank=True)),
                ('error_min', models.FloatField(null=True, blank=True)),
                ('bibcode', models.CharField(default=b'', max_length=50, null=True, blank=True, validators=[django.core.validators.RegexValidator(regex=b'[0-9]{4}[A-Za-z&]+[\\.]*[0-9]+[A-Za-z]?[\\.]*[0-9]+[A-Z]', message=b'Invalid bibcode', code=b'nomatch')])),
                ('unit', models.CharField(default=b'm/s', max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='mirror',
            name='telescope',
            field=models.ForeignKey(related_name='mirrors', default=None, blank=True, to='arcsecond.Telescope', null=True),
        ),
        migrations.AddField(
            model_name='link',
            name='publications',
            field=models.ForeignKey(related_name='download_links', blank=True, to='arcsecond.Publication', null=True),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='calculated_temperature',
            field=models.OneToOneField(related_name='calculated_temperature', null=True, blank=True, to='arcsecond.Temperature'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='coordinates',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.AstronomicalCoordinates'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='eccentricity',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.Eccentricity'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='geometric_albedo',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.Albedo'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='hottest_point_longitude',
            field=models.OneToOneField(related_name='hottest_point_longitude', null=True, blank=True, to='arcsecond.Angle'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='impact_parameter',
            field=models.OneToOneField(related_name='impact_parameter', null=True, blank=True, to='arcsecond.Angle'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='inclination',
            field=models.OneToOneField(related_name='inclination', null=True, blank=True, to='arcsecond.Angle'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='lambda_angle',
            field=models.OneToOneField(related_name='lambda_angle', null=True, blank=True, to='arcsecond.Angle'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='mass',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.Mass'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='measured_temperature',
            field=models.OneToOneField(related_name='measured_temperature', null=True, blank=True, to='arcsecond.Temperature'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='omega_angle',
            field=models.OneToOneField(related_name='omega_angle', null=True, blank=True, to='arcsecond.Angle'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='orbital_period',
            field=models.OneToOneField(related_name='orbital_period', null=True, blank=True, to='arcsecond.Period'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='parent_star',
            field=models.ForeignKey(related_name='planets', blank=True, to='arcsecond.AstronomicalObject', null=True),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='primary_transit',
            field=models.OneToOneField(related_name='primary_transit', null=True, blank=True, to='arcsecond.JulianDay'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='radius',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.Radius'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='secondary_transit',
            field=models.OneToOneField(related_name='secondary_transit', null=True, blank=True, to='arcsecond.JulianDay'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='semi_major_axis',
            field=models.OneToOneField(related_name='semi_major_axis', null=True, blank=True, to='arcsecond.EllipseAxis'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='surface_gravity',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.Gravity'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='time_conjonction',
            field=models.OneToOneField(related_name='time_conjonction', null=True, blank=True, to='arcsecond.JulianDay'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='time_periastron',
            field=models.OneToOneField(related_name='time_periastron', null=True, blank=True, to='arcsecond.JulianDay'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='time_radial_velocity_zero',
            field=models.OneToOneField(related_name='time_radial_velocity_zero', null=True, blank=True, to='arcsecond.JulianDay'),
        ),
        migrations.AddField(
            model_name='exoplanet',
            name='velocity_semiamplitude',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.Velocity'),
        ),
        migrations.AddField(
            model_name='coordinatesconversion',
            name='FK4',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.FK4Coordinates'),
        ),
        migrations.AddField(
            model_name='coordinatesconversion',
            name='FK4noETerms',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.FK4NoETermsCoordinates'),
        ),
        migrations.AddField(
            model_name='coordinatesconversion',
            name='FK5',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.FK5Coordinates'),
        ),
        migrations.AddField(
            model_name='coordinatesconversion',
            name='GCRS',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.GCRSCoordinates'),
        ),
        migrations.AddField(
            model_name='coordinatesconversion',
            name='Galactic',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.GalacticCoordinates'),
        ),
        migrations.AddField(
            model_name='coordinatesconversion',
            name='ICRS',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.ICRSCoordinates'),
        ),
        migrations.AddField(
            model_name='coordinatesconversion',
            name='error',
            field=models.OneToOneField(related_name='coordinates_conversion_error', null=True, blank=True, to='arcsecond.Error'),
        ),
        migrations.AlterUniqueTogether(
            name='coordinates',
            unique_together=set([('longitude', 'latitude')]),
        ),
        migrations.AddField(
            model_name='astronomicalorganisation',
            name='observing_sites',
            field=models.ManyToManyField(related_name='astronomical_organisations', to='arcsecond.ObservingSite'),
        ),
        migrations.AddField(
            model_name='astronomicalobject',
            name='distance',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.Distance'),
        ),
        migrations.AddField(
            model_name='astronomicalobject',
            name='effective_temperature',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.Temperature'),
        ),
        migrations.AddField(
            model_name='astronomicalobject',
            name='mass',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.Mass'),
        ),
        migrations.AddField(
            model_name='astronomicalobject',
            name='metallicity',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.Metallicity'),
        ),
        migrations.AddField(
            model_name='astronomicalobject',
            name='radius',
            field=models.OneToOneField(null=True, blank=True, to='arcsecond.Radius'),
        ),
        migrations.AddField(
            model_name='astronomerstelegram',
            name='authors',
            field=models.ManyToManyField(related_name='astronomer_telegrams', to='arcsecond.Person'),
        ),
        migrations.AddField(
            model_name='astronomerstelegram',
            name='detected_objects',
            field=models.ManyToManyField(related_name='astronomer_telegrams', to='arcsecond.AstronomicalObject'),
        ),
        migrations.AddField(
            model_name='astronomerstelegram',
            name='external_links',
            field=models.ManyToManyField(related_name='astronomer_telegrams', to='arcsecond.Link'),
        ),
        migrations.AddField(
            model_name='astronomerstelegram',
            name='related_telegrams',
            field=models.ManyToManyField(related_name='related_telegrams_rel_+', to='arcsecond.AstronomersTelegram'),
        ),
        migrations.AddField(
            model_name='alias',
            name='astronomical_object',
            field=models.ForeignKey(related_name='aliases', blank=True, to='arcsecond.AstronomicalObject', null=True),
        ),
        migrations.AddField(
            model_name='alias',
            name='exoplanet',
            field=models.ForeignKey(related_name='aliases', blank=True, to='arcsecond.Exoplanet', null=True),
        ),
    ]
